definitions:
  controllers.ErrorResponse:
    description: Standard error response
    properties:
      message:
        type: string
    type: object
  controllers.PaginatedBooksResponse:
    description: Response structure for paginated list of books
    properties:
      data:
        items:
          $ref: '#/definitions/database.Book'
        type: array
      page:
        type: integer
      page_size:
        type: integer
      total_count:
        type: integer
      total_pages:
        type: integer
    type: object
  controllers.UsersResponse:
    description: Response structure for list of users
    properties:
      count:
        type: integer
      data:
        items:
          $ref: '#/definitions/database.User'
        type: array
    type: object
  database.Book:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/database.User'
      userID:
        type: integer
    type: object
  database.CreateBookSchema:
    properties:
      title:
        type: string
    required:
    - title
    type: object
  database.CreateUserSchema:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  database.UpdateBookSchema:
    properties:
      author:
        type: string
      title:
        type: string
    type: object
  database.UpdateUserSchema:
    properties:
      name:
        type: string
      password:
        type: string
    type: object
  database.User:
    properties:
      books:
        items:
          $ref: '#/definitions/database.Book'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      lastLogin:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST API using gin and gorm
  title: gin-bookstore
  version: "1.0"
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Logs in a user with their email and password, returns an authentication
        token on success.
      parameters:
      - description: Login credentials
        in: body
        name: loginBody
        required: true
        schema:
          $ref: '#/definitions/database.CreateUserSchema'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login with token
          headers:
            Authorization:
              description: Bearer <token>"  // Specify that a JWT token is returned
                in the Authorization header
              type: string
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid Credentials
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - auth
  /books:
    get:
      description: Get a list of books with pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.PaginatedBooksResponse'
      summary: List books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add a new book to the collection
      parameters:
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/database.CreateBookSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Remove a book from the collection by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a book by ID
      tags:
      - books
    get:
      description: Retrieve a book's details by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Modify the details of a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/database.UpdateBookSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a book by ID
      tags:
      - books
  /users:
    get:
      description: Retrieve a list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UsersResponse'
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Add a new user to the system
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/database.CreateUserSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Remove a user from the system by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user by ID
      tags:
      - users
    get:
      description: Retrieve a user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Modify a user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/database.UpdateUserSchema'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user by ID
      tags:
      - users
  /users/current:
    get:
      description: Retrieve the currently logged-in user's details
      produces:
      - application/json
      responses:
        "200":
          description: Current user details
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Current User
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
